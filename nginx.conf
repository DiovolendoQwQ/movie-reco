# Basic Nginx configuration for serving static files and proxying API requests

# user nginx; # Optional: Define user if needed
worker_processes auto; # Use number of available CPU cores

# error_log /var/log/nginx/error.log warn; # Define error log location and level
# pid /var/run/nginx.pid; # Define PID file location

events {
    worker_connections 1024; # Max connections per worker
}

http {
    include /etc/nginx/mime.types; # Include standard MIME types
    default_type application/octet-stream; # Default type for unknown files

    # log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    #                 '$status $body_bytes_sent "$http_referer" '
    #                 '"$http_user_agent" "$http_x_forwarded_for"';
    # access_log /var/log/nginx/access.log main; # Define access log location and format

    sendfile on; # Enable efficient file transfer
    # tcp_nopush on; # Optimize TCP packet sending
    keepalive_timeout 65; # Keepalive connection timeout
    # gzip on; # Enable gzip compression (optional)

    server {
        listen 80; # Listen on the standard HTTP port inside the container
        server_name localhost; # Or your domain name

        # Root directory for static files (matches volume mount in docker-compose)
        root /usr/share/nginx/html;
        index index.html index.htm; # Default files to serve

        # Location block for serving static files (HTML, CSS, JS)
        location / {
            try_files $uri $uri/ /index.html; # Try serving file, then directory, then fallback to index.html
        }

        # Location block for proxying API requests to the FastAPI backend
        location /api/ {
            proxy_pass http://api:8000/; # Forward requests to the 'api' service on port 8000
            proxy_set_header Host $host; # Preserve original host header
            proxy_set_header X-Real-IP $remote_addr; # Pass real client IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # Pass proxy chain IPs
            proxy_set_header X-Forwarded-Proto $scheme; # Pass original scheme (http/https)

            # Optional: WebSocket support if your API uses them
            # proxy_http_version 1.1;
            # proxy_set_header Upgrade $http_upgrade;
            # proxy_set_header Connection "upgrade";
        }

        # Optional: Custom error pages
        # error_page 500 502 503 504 /50x.html;
        # location = /50x.html {
        #     root /usr/share/nginx/html;
        # }
    }
}
